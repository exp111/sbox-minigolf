// 
// Minigolf.FlagBase : Sandbox.ModelEntity 
// 
@PointClass  editormodel( "models/golf_flag.vmdl" ) 
metadata
{
}
= minigolf_flag_base : "Minigolf Flag Base"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
]

// 
// Minigolf.FuncMovingObstacle : Sandbox.KeyframeEntity 
// 
@PointClass = func_moving_obstacle : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	movedir(angle) : "movedir" :  : ""
	movedir_islocal(boolean) : "movedir_islocal" :  : ""
	spawnpos(boolean) : "spawnpos" :  : ""
	lip(float) : "lip" :  : ""
	speed(float) : "speed" :  : ""
	wait(float) : "wait" :  : ""

]

// 
// Minigolf.SpeedBoost : Sandbox.ModelEntity 
// 
@SolidClass  drawangles( "movedir" )  base( RenderFields )  base( PhysicsTypeOverride_Mesh ) 
metadata
{
}
= minigolf_speed_boost : "An brush built entity that will boost balls."
[
	vrad_brush_cast_shadows( boolean )[ group="Render Properties" ] : "Shadows" : 0 : "Set this if this brush casts lightmap shadows."
	disableshadows( boolean )[group = "Render Properties"] : "Disable shadows" : 0
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	speedmultiplier(float) : "Speed Multiplier" : "2" : "How much the ball will accelerate"
	maxspeed(float) : "Max Speed" : "1000" : "Max speed the ball can be accelerated to from this booster."
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" :  : "The direction the ball will move, when told to."

]

// 
// Minigolf.Wall : Sandbox.ModelEntity 
// 
@SolidClass  base( PhysicsTypeOverride_Mesh )  base( RenderFields ) 
metadata
{
}
= minigolf_wall : "Wall stuff"
[
	vrad_brush_cast_shadows( boolean )[ group="Render Properties" ] : "Shadows" : 0 : "Set this if this brush casts lightmap shadows."
	disableshadows( boolean )[group = "Render Properties"] : "Disable shadows" : 0
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	reflect(boolean) : "Reflect" : "True" : "If checked, the ball will bounce off this surface at the defined multiplier."
	reflectmultiplier(float) : "Reflect multiplier" : "1" : "How much the wall will reflect"

]

// 
// Minigolf.Water : Sandbox.AnimEntity 
// 
@PointClass = minigolf_water : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
]

// 
// Minigolf.HoleBounds : Sandbox.ModelEntity 
// 
@SolidClass = minigolf_hole_bounds : "Minigolf Bounds of a Hole"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	hole_number(integer) : "Hole Number" : "1" : "Which hole this hole is on."

]

// 
// Minigolf.HoleCamera : Sandbox.Entity 
// 
@PointClass  editormodel( "models/editor/camera.vmdl" ) 
metadata
{
}
= minigolf_hole_camera : "Minigolf Hole Camera"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	hole_number(integer) : "Hole Number" :  : "Which hole this camera is for"
	fov(float) : "FOV" :  : "Field of view in degrees"
	znear(float) : "ZNear" :  : "Distance to the near plane"
	zfar(float) : "ZFar" :  : "Distance to the far plane"

]

// 
// Minigolf.StartCamera : Sandbox.Entity 
// 
@PointClass  editormodel( "models/editor/camera.vmdl" ) 
metadata
{
}
= minigolf_start_camera : "Minigolf Start Camera"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	znear(float) : "ZNear" :  : "Distance to the near plane"
	zfar(float) : "ZFar" :  : "Distance to the far plane"

]

// 
// Minigolf.HoleGoal : Sandbox.ModelEntity 
// 
@SolidClass = minigolf_hole_goal : "Minigolf Hole"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	hole_number(integer) : "Hole Number" : "1" : "Which hole this hole is on."

]

// 
// Minigolf.HoleSpawn : Sandbox.Entity 
// 
@PointClass  editormodel( "models/golf_ball.vmdl" )  drawangles(  ) 
metadata
{
}
= minigolf_hole_spawn : "Minigolf Ball Spawn"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	hole_number(integer) : "Hole Number" : "1" : "Which hole this spawnpoint is on."
	hole_name(string) : "Hole Name" : "wanker" : "cool name"
	hole_par(integer) : "Hole Par" : "3" : "How many strokes should this hole be done in."

]

